// suppose that a student is NOT already registered to a battle and wants to join

frame Join Battle

fontawesome6solid f390 WebApp
participant API Gateway
participant Tournament Manager
database Tournament DB
participant Battle Manager
database Battle DB
participantspacing 5

activate WebApp
WebApp->API Gateway: 1: getTournament(id)
activate API Gateway
API Gateway->Tournament Manager: 2: getTournament(id)
activate Tournament Manager

Tournament Manager->Tournament DB: 3: executeQuery(Tournament id)
activate Tournament DB

alt tournament_id_valid == true
Tournament DB-->Tournament Manager: 4: success
Tournament Manager-->API Gateway: 5: result
API Gateway-->WebApp: 6. result
WebApp->API Gateway: 7: getBattle(id)
API Gateway->Battle Manager: 8: getBattle(id)
activate Battle Manager

Battle Manager->Battle DB: 9: executeQuery(Battle id)

activate Battle DB
alt battle_id_valid == true
Battle DB-->Battle Manager: 10: success
Battle Manager-->API Gateway: 11: result
API Gateway-->WebApp: result
deactivate Battle Manager
WebApp->API Gateway: 12: joinBattle(student, battle)
API Gateway->Battle Manager: 13: joinBattle(student, battle)
activate Battle Manager
// THIS IS AN INSERT QUERY
Battle Manager->Battle DB: 14: executeQuery(Battle id, Student id)
Battle DB-->Battle Manager: 15: success
else
Battle DB->Battle Manager: invalid_id
deactivate Battle DB
end

Battle Manager-->API Gateway: 16: result
deactivate Battle Manager
API Gateway-->WebApp: 17: result

else 
Tournament DB-->Tournament Manager: invalid_id
deactivate Tournament DB
Tournament Manager-->API Gateway: result
deactivate Tournament Manager
API Gateway-->WebApp: result
end

